name: CI

env:
  CARGO_TERM_COLOR: always
  RUST_TOOLCHAIN: stable

on:
  push:
    branches:
      - main
  pull_request: {}

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{env.RUST_TOOLCHAIN}}
          override: true
          profile: minimal
          components: clippy, rustfmt
      - uses: Swatinem/rust-cache@v2
      - name: check
        run: |
          cargo check --all --all-targets --all-features
      - name: clippy
        run: |
          cargo clippy --all --all-targets --all-features
      - name: rustfmt
        run: |
          cargo fmt --all -- --check

  check-docs:
    runs-on: ubuntu-latest
    needs: check
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{env.RUST_TOOLCHAIN}}
          override: true
          profile: minimal
      - uses: Swatinem/rust-cache@v1
      - name: cargo doc
        env:
          RUSTDOCFLAGS: "-D rustdoc::broken_intra_doc_links"
        run: cargo doc --all-features --no-deps --workspace

  test:
    needs: check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{env.RUST_TOOLCHAIN}}
          override: true
          profile: minimal
      - uses: Swatinem/rust-cache@v1
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --workspace

  test-windows:
    needs: check
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{env.RUST_TOOLCHAIN}}
          override: true
          profile: minimal
      - uses: Swatinem/rust-cache@v1
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --workspace

  test-macos:
    needs: check
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{env.RUST_TOOLCHAIN}}
          override: true
          profile: minimal
      - uses: Swatinem/rust-cache@v1
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --workspace

  test-docs:
    needs: check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{env.RUST_TOOLCHAIN}}
          override: true
          profile: minimal
      - uses: Swatinem/rust-cache@v1
      - name: Run doc tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --doc --workspace

  test-examples:
    needs: check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{env.RUST_TOOLCHAIN}}
          override: true
          profile: minimal
      - uses: Swatinem/rust-cache@v1
      - name: Run doc tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --examples --workspace

  test-examples-windows:
    needs: check
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{env.RUST_TOOLCHAIN}}
          override: true
          profile: minimal
      - uses: Swatinem/rust-cache@v1
      - name: Run doc tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --examples --workspace

  test-examples-macos:
    needs: check
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{env.RUST_TOOLCHAIN}}
          override: true
          profile: minimal
      - uses: Swatinem/rust-cache@v1
      - name: Run doc tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --examples --workspace

  cargo-hack:
    needs: check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{env.RUST_TOOLCHAIN}}
          profile: minimal
      - name: install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      - name: cargo hack check
        run: cargo hack check --each-feature --no-dev-deps --workspace

  dependencies-are-sorted:
    needs: check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{env.RUST_TOOLCHAIN}}
          override: true
          profile: minimal
      - uses: Swatinem/rust-cache@v2
      - name: Install cargo-sort
        run: |
          cargo install cargo-sort
      - name: Check dependency tables
        working-directory: .
        run: |
          cargo sort --workspace --grouped --check

  cargo-deny:
    needs: check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: EmbarkStudios/cargo-deny-action@v1

  semver-checks:
    needs: check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check semver
        uses: obi1kenobi/cargo-semver-checks-action@v2
        with:
          rust-toolchain: ${{env.RUST_TOOLCHAIN}}

  deploy-rama-fp-docker:
    runs-on: ubuntu-latest
    needs: [test, test-examples, test-docs]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: glendc/rama-fp:latest
          file: rama-fp/infra/Dockerfile

  deploy-rama-fp-fly:
    runs-on: ubuntu-latest
    needs: deploy-rama-fp-docker
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: |
          cd rama-fp/infra/deployments/fp
          flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  deploy-rama-fp-h1-fly:
    runs-on: ubuntu-latest
    needs: deploy-rama-fp-docker
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: |
          cd rama-fp/infra/deployments/fp-h1
          flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
